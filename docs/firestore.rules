rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Users: each user can read their own user doc. Only Admin can write (assign roles).
    match /users/{uid} {
      allow read: if isSignedIn() && uid == request.auth.uid;
      allow write: if isAdmin();
    }

    // Products: Admin-only writes. Any authenticated user can read.
    match /products/{productId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // Invoices: authenticated users can create. Invoices are immutable afterwards.
    match /invoices/{invoiceId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // Optional future collections (customers, suppliers) can follow similar patterns:
    // match /customers/{customerId} {
    //   allow read: if isSignedIn();
    //   allow write: if isAdmin();
    // }
    // match /suppliers/{supplierId} {
    //   allow read: if isSignedIn();
    //   allow write: if isAdmin();
    // }
  }
}
